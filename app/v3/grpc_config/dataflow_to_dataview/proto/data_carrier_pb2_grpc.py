# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import data_carrier_pb2 as data__carrier__pb2


class DataCarrierStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateSourceGroup = channel.unary_unary(
                '/source_data.DataCarrier/CreateSourceGroup',
                request_serializer=data__carrier__pb2.GroupRequest.SerializeToString,
                response_deserializer=data__carrier__pb2.Response.FromString,
                )
        self.CreateSource = channel.unary_unary(
                '/source_data.DataCarrier/CreateSource',
                request_serializer=data__carrier__pb2.SourceRequest.SerializeToString,
                response_deserializer=data__carrier__pb2.Response.FromString,
                )
        self.ConfigSource = channel.unary_unary(
                '/source_data.DataCarrier/ConfigSource',
                request_serializer=data__carrier__pb2.ConfigRequest.SerializeToString,
                response_deserializer=data__carrier__pb2.Response.FromString,
                )
        self.ConfigSourceWithTypes = channel.unary_unary(
                '/source_data.DataCarrier/ConfigSourceWithTypes',
                request_serializer=data__carrier__pb2.ConfigWithTypesRequest.SerializeToString,
                response_deserializer=data__carrier__pb2.Response.FromString,
                )
        self.InsertData = channel.stream_unary(
                '/source_data.DataCarrier/InsertData',
                request_serializer=data__carrier__pb2.DataRequest.SerializeToString,
                response_deserializer=data__carrier__pb2.Response.FromString,
                )
        self.DeleteGroup = channel.unary_unary(
                '/source_data.DataCarrier/DeleteGroup',
                request_serializer=data__carrier__pb2.GroupDeleteRequest.SerializeToString,
                response_deserializer=data__carrier__pb2.Response.FromString,
                )
        self.DeleteSource = channel.unary_unary(
                '/source_data.DataCarrier/DeleteSource',
                request_serializer=data__carrier__pb2.SourceDeleteRequest.SerializeToString,
                response_deserializer=data__carrier__pb2.Response.FromString,
                )
        self.IsDestinationUsed = channel.unary_unary(
                '/source_data.DataCarrier/IsDestinationUsed',
                request_serializer=data__carrier__pb2.RequestIsDestinationUsed.SerializeToString,
                response_deserializer=data__carrier__pb2.ResponseIsDestinationUsed.FromString,
                )


class DataCarrierServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateSourceGroup(self, request, context):
        """creation rpc
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigSource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigSourceWithTypes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertData(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteGroup(self, request, context):
        """deletion rpc
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsDestinationUsed(self, request, context):
        """service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataCarrierServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateSourceGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSourceGroup,
                    request_deserializer=data__carrier__pb2.GroupRequest.FromString,
                    response_serializer=data__carrier__pb2.Response.SerializeToString,
            ),
            'CreateSource': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSource,
                    request_deserializer=data__carrier__pb2.SourceRequest.FromString,
                    response_serializer=data__carrier__pb2.Response.SerializeToString,
            ),
            'ConfigSource': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigSource,
                    request_deserializer=data__carrier__pb2.ConfigRequest.FromString,
                    response_serializer=data__carrier__pb2.Response.SerializeToString,
            ),
            'ConfigSourceWithTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigSourceWithTypes,
                    request_deserializer=data__carrier__pb2.ConfigWithTypesRequest.FromString,
                    response_serializer=data__carrier__pb2.Response.SerializeToString,
            ),
            'InsertData': grpc.stream_unary_rpc_method_handler(
                    servicer.InsertData,
                    request_deserializer=data__carrier__pb2.DataRequest.FromString,
                    response_serializer=data__carrier__pb2.Response.SerializeToString,
            ),
            'DeleteGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteGroup,
                    request_deserializer=data__carrier__pb2.GroupDeleteRequest.FromString,
                    response_serializer=data__carrier__pb2.Response.SerializeToString,
            ),
            'DeleteSource': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSource,
                    request_deserializer=data__carrier__pb2.SourceDeleteRequest.FromString,
                    response_serializer=data__carrier__pb2.Response.SerializeToString,
            ),
            'IsDestinationUsed': grpc.unary_unary_rpc_method_handler(
                    servicer.IsDestinationUsed,
                    request_deserializer=data__carrier__pb2.RequestIsDestinationUsed.FromString,
                    response_serializer=data__carrier__pb2.ResponseIsDestinationUsed.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'source_data.DataCarrier', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataCarrier(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateSourceGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/source_data.DataCarrier/CreateSourceGroup',
            data__carrier__pb2.GroupRequest.SerializeToString,
            data__carrier__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateSource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/source_data.DataCarrier/CreateSource',
            data__carrier__pb2.SourceRequest.SerializeToString,
            data__carrier__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigSource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/source_data.DataCarrier/ConfigSource',
            data__carrier__pb2.ConfigRequest.SerializeToString,
            data__carrier__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigSourceWithTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/source_data.DataCarrier/ConfigSourceWithTypes',
            data__carrier__pb2.ConfigWithTypesRequest.SerializeToString,
            data__carrier__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InsertData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/source_data.DataCarrier/InsertData',
            data__carrier__pb2.DataRequest.SerializeToString,
            data__carrier__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/source_data.DataCarrier/DeleteGroup',
            data__carrier__pb2.GroupDeleteRequest.SerializeToString,
            data__carrier__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/source_data.DataCarrier/DeleteSource',
            data__carrier__pb2.SourceDeleteRequest.SerializeToString,
            data__carrier__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsDestinationUsed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/source_data.DataCarrier/IsDestinationUsed',
            data__carrier__pb2.RequestIsDestinationUsed.SerializeToString,
            data__carrier__pb2.ResponseIsDestinationUsed.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
