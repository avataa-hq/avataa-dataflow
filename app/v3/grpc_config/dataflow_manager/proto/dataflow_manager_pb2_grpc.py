# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import dataflow_manager_pb2 as dataflow__manager__pb2


class DataflowManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTPRMNamesOfTMO = channel.unary_unary(
                '/dataflow_manager.DataflowManager/GetTPRMNamesOfTMO',
                request_serializer=dataflow__manager__pb2.RequestGetTPRMNamesOfTMO.SerializeToString,
                response_deserializer=dataflow__manager__pb2.ResponseGetTPRMNamesOfTMO.FromString,
                )
        self.GetObjectsWithParams = channel.unary_stream(
                '/dataflow_manager.DataflowManager/GetObjectsWithParams',
                request_serializer=dataflow__manager__pb2.RequestGetObjectsWithParams.SerializeToString,
                response_deserializer=dataflow__manager__pb2.ResponseGetObjectsWithParams.FromString,
                )
        self.GetTPRMNameToTypeMapper = channel.unary_unary(
                '/dataflow_manager.DataflowManager/GetTPRMNameToTypeMapper',
                request_serializer=dataflow__manager__pb2.RequestGetTPRMNameToTypeMapper.SerializeToString,
                response_deserializer=dataflow__manager__pb2.ResponseGetTPRMNameToTypeMapper.FromString,
                )


class DataflowManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetTPRMNamesOfTMO(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetObjectsWithParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTPRMNameToTypeMapper(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataflowManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTPRMNamesOfTMO': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTPRMNamesOfTMO,
                    request_deserializer=dataflow__manager__pb2.RequestGetTPRMNamesOfTMO.FromString,
                    response_serializer=dataflow__manager__pb2.ResponseGetTPRMNamesOfTMO.SerializeToString,
            ),
            'GetObjectsWithParams': grpc.unary_stream_rpc_method_handler(
                    servicer.GetObjectsWithParams,
                    request_deserializer=dataflow__manager__pb2.RequestGetObjectsWithParams.FromString,
                    response_serializer=dataflow__manager__pb2.ResponseGetObjectsWithParams.SerializeToString,
            ),
            'GetTPRMNameToTypeMapper': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTPRMNameToTypeMapper,
                    request_deserializer=dataflow__manager__pb2.RequestGetTPRMNameToTypeMapper.FromString,
                    response_serializer=dataflow__manager__pb2.ResponseGetTPRMNameToTypeMapper.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dataflow_manager.DataflowManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataflowManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetTPRMNamesOfTMO(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dataflow_manager.DataflowManager/GetTPRMNamesOfTMO',
            dataflow__manager__pb2.RequestGetTPRMNamesOfTMO.SerializeToString,
            dataflow__manager__pb2.ResponseGetTPRMNamesOfTMO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetObjectsWithParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/dataflow_manager.DataflowManager/GetObjectsWithParams',
            dataflow__manager__pb2.RequestGetObjectsWithParams.SerializeToString,
            dataflow__manager__pb2.ResponseGetObjectsWithParams.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTPRMNameToTypeMapper(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dataflow_manager.DataflowManager/GetTPRMNameToTypeMapper',
            dataflow__manager__pb2.RequestGetTPRMNameToTypeMapper.SerializeToString,
            dataflow__manager__pb2.ResponseGetTPRMNameToTypeMapper.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
