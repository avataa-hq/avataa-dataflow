from airflow.operators.python import PythonOperator
from airflow import DAG
from airflow_functions.airflow_source_managers.routers.sources.sources_managers.db_manager import DBSourceManager
from airflow_functions.airflow_source_managers.routers.sources.sources_managers.api_manager import APISourceManager
from airflow_functions.airflow_source_managers.routers.sources.sources_managers.file_manager import (ManualFileSourceManager,
                                                                                   SFTPSourceManager)
import pickle
from datetime import datetime
from airflow_functions.airflow_source_managers.dags_utils.delete_db_on_fails import delete_db_tables_if_load_fails
from airflow_functions.airflow_source_managers.routers.sources.sources_managers.utils import get_source_manager
from airflow_functions.airflow_source_managers.utils.encryption_utils import decrypt_data

def create_db_name(dag_id: str, source_id: str):
    timestamp = str(datetime.now().timestamp()).replace('.', '_')
    return '_'.join([dag_id, source_id, timestamp])

